# -*- coding: utf-8 -*-
"""linear regression prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WzNqTzBhXHbdoMdQiACRFbo2hV2Tqyqo
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/Metro_zhvi_uc_sfrcondo_tier_0.33_0.67_sm_sa_month.csv')

df.head()

df.describe()

df.info()



df.isnull().sum()

df.corr()



df= df.fillna(df.mean())

# categorical_cols = ['SizeRank', 'RegionType', 'StateName']
# X = pd.get_dummies(X, columns=categorical_cols)
X = df.drop(['RegionID'], axis=1)
y = df['RegionID']

# from sklearn.preprocessing import LabelEncoder
# label_encoder = LabelEncoder()
# for col in categorical_cols:
#  X[col] = label_encoder.fit_transform(X[col])
categorical_cols = ['RegionName', 'RegionType', 'StateName']
X = pd.get_dummies(X, columns=categorical_cols)

from sklearn.model_selection import train_test_split
# X = df[['SizeRank', 'RegionType', 'StateName']]
# y = df['2000-01-31']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train

y_train

#standradilizing model the datset
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

#only x karege bez it is a independent not need to standardlize of dependend event
X_train=scaler.fit_transform(X_train)

X_test=scaler.transform(X_test)

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import cross_val_score
model = LinearRegression()
model.fit(X_train,y_train)
cross_val_score(model ,X_train, y_train,scoring='neg_mean_squared_error',cv=5)

mse=cross_val_score(model ,X_train, y_train,scoring='neg_mean_squared_error',cv=5)

np.mean(mse)

from sklearn.metrics import mean_squared_error, r2_score
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

"""by fit model
# **New Section**
"""

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train,y_train)

from sklearn.metrics import mean_squared_error, r2_score
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

reg_pred=model.predict(X_test)

reg_pred

import seaborn as sns
sns.displot(reg_pred-y_test)

sns.displot(reg_pred-y_test,kind='kde')
#its good and show the less variance  and dataset is good

from sklearn.metrics import r2_score

score=r2_score(reg_pred,y_test)

score

